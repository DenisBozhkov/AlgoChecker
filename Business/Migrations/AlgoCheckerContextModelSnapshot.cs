// <auto-generated />
using System;
using Business;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Business.Migrations
{
    [DbContext(typeof(AlgoCheckerContext))]
    partial class AlgoCheckerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Business.Entity.CheckAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InputTestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OutputTestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputTestCaseId");

                    b.HasIndex("OutputTestCaseId");

                    b.ToTable("CheckAttributeEntity");
                });

            modelBuilder.Entity("Business.Entity.SolutionTestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid?>("TaskEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskEntityId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("SolutionTestEntity");
                });

            modelBuilder.Entity("Business.Entity.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskEntity");
                });

            modelBuilder.Entity("Business.Entity.TemplateAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InputTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OneLine")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OutputTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InputTaskId");

                    b.HasIndex("OutputTaskId");

                    b.ToTable("TemplateAttributeEntity");
                });

            modelBuilder.Entity("Business.Entity.TestCaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasAbsoluteScoring")
                        .HasColumnType("bit");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<Guid?>("TaskEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskEntityId");

                    b.HasIndex("TaskId");

                    b.ToTable("TestCaseEntity");
                });

            modelBuilder.Entity("Business.Entity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEntity");
                });

            modelBuilder.Entity("Business.Entity.CheckAttributeEntity", b =>
                {
                    b.HasOne("Business.Entity.TestCaseEntity", "InputTestCase")
                        .WithMany("InputAttributes")
                        .HasForeignKey("InputTestCaseId");

                    b.HasOne("Business.Entity.TestCaseEntity", "OutputTestCase")
                        .WithMany("OutputAttributes")
                        .HasForeignKey("OutputTestCaseId");

                    b.Navigation("InputTestCase");

                    b.Navigation("OutputTestCase");
                });

            modelBuilder.Entity("Business.Entity.SolutionTestEntity", b =>
                {
                    b.HasOne("Business.Entity.TaskEntity", null)
                        .WithMany("SolutionTests")
                        .HasForeignKey("TaskEntityId");

                    b.HasOne("Business.Entity.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Business.Entity.UserEntity", null)
                        .WithMany("Solutions")
                        .HasForeignKey("UserEntityId");

                    b.HasOne("Business.Entity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Business.Entity.TemplateAttributeEntity", b =>
                {
                    b.HasOne("Business.Entity.TaskEntity", "InputTask")
                        .WithMany("Input")
                        .HasForeignKey("InputTaskId");

                    b.HasOne("Business.Entity.TaskEntity", "OutputTask")
                        .WithMany("Output")
                        .HasForeignKey("OutputTaskId");

                    b.Navigation("InputTask");

                    b.Navigation("OutputTask");
                });

            modelBuilder.Entity("Business.Entity.TestCaseEntity", b =>
                {
                    b.HasOne("Business.Entity.TaskEntity", null)
                        .WithMany("TestCases")
                        .HasForeignKey("TaskEntityId");

                    b.HasOne("Business.Entity.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Business.Entity.TaskEntity", b =>
                {
                    b.Navigation("Input");

                    b.Navigation("Output");

                    b.Navigation("SolutionTests");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("Business.Entity.TestCaseEntity", b =>
                {
                    b.Navigation("InputAttributes");

                    b.Navigation("OutputAttributes");
                });

            modelBuilder.Entity("Business.Entity.UserEntity", b =>
                {
                    b.Navigation("Solutions");
                });
#pragma warning restore 612, 618
        }
    }
}
